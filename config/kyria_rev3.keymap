/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

&mt {
    flavor = "balanced";
    quick-tap-ms = <200>;
};

/ {
    macros {
        quick_up: quick_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp UP_ARROW &kp UP_ARROW &kp UP_ARROW>;
            label = "QUICK_UP";
        };

        quick_down: quick_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN>;
            label = "QUICK_DOWN";
        };

        window_horizontal_small: window_horizontal_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp PLUS>;
            label = "WINDOW_HORIZONTAL_SMALL";
        };

        window_horizontal_big: window_horizontal_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp MINUS>;
            label = "WINDOW_HORIZONTAL_BIG";
        };

        window_vert_small: window_vert_small {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp LESS_THAN>;
            label = "WINDOW_VERT_SMALL";
        };

        window_vert_big: window_vert_big {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(W) &kp GREATER_THAN>;
            label = "WINDOW_VERT_BIG";
        };
    };

    behaviors {
        slow_mt: slow_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_MT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        window_heigh_encoder: window_heigh_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "WINDOW_HEIGH_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&window_horizontal_big>, <&window_horizontal_small>;
        };

        window_vert_encoder: window_vert_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            label = "WINDOW_VERT_ENCODER";
            #sensor-binding-cells = <0>;
            bindings = <&window_vert_big>, <&window_vert_small>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&slow_mt LG(N4) LG(N1)  &kp Q                &kp W           &kp E        &kp R             &kp T                                                            &kp Y      &kp U             &kp I        &kp O           &kp P                        &mt LEFT_ALT LEFT_BRACKET
&slow_mt LG(N5) LG(N2)  &slow_mt LEFT_ALT A  &mt LEFT_GUI S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G                                                            &kp H      &mt LEFT_SHIFT J  &mt LCTRL K  &mt LEFT_GUI L  &slow_mt LEFT_ALT SEMICOLON  &mt LEFT_SHIFT SQT
&slow_mt LG(N6) LG(N3)  &kp Z                &kp X           &kp C        &kp V             &kp B      &none        &tog 1        &tog 3        &none        &kp N      &kp M             &kp COMMA    &kp DOT         &kp FSLH                     &kp BACKSLASH
                                                             &caps_word   &kp SPACE         &lt 1 TAB  &lt 2 ENTER  &lt 1 ESCAPE  &lt 1 ESCAPE  &lt 2 ENTER  &lt 1 TAB  &kp BACKSPACE     &kp DEL
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>,
                <&inc_dec_kp PAGE_DOWN PG_UP>;
        };

        number_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &kp N1  &kp N2                 &kp N3                  &kp NUMBER_4                  &kp N5                                             &kp NUMBER_6    &kp N7               &kp N8        &kp N9              &kp N0             &kp RA(LEFT_BRACKET)
&trans  &trans  &slow_mt LEFT_GUI SQT  &mt LCTRL LEFT_BRACKET  &mt LEFT_SHIFT RIGHT_BRACKET  &kp GRAVE                                          &kp LEFT_ARROW  &mt LEFT_SHIFT DOWN  &mt LCTRL UP  &mt LEFT_GUI RIGHT  &kp RA(SEMICOLON)  &kp RA(SQT)
&trans  &trans  &trans                 &kp MINUS               &kp EQUAL                     &kp BACKSLASH  &trans  &trans  &bt BT_NXT  &trans  &kp HOME        &kp PAGE_DOWN        &kp PG_UP     &kp END             &trans             &bt BT_NXT
                                       &trans                  &trans                        &trans         &trans  &trans  &trans      &trans  &trans          &trans               &trans
            >;

            sensor-bindings = <&window_vert_encoder>, <&window_heigh_encoder>;
        };

        sym_layer {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN        &kp HASH        &kp DOLLAR       &kp PERCENT                                  &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &kp DOUBLE_QUOTES  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp TILDE                                    &trans     &trans         &trans        &trans                &trans                 &trans
&trans  &trans           &trans             &kp UNDERSCORE  &kp PLUS         &kp PIPE     &trans  &trans  &trans  &trans  &trans     &trans         &trans        &trans                &trans                 &trans
                                            &trans          &trans           &trans       &trans  &trans  &trans  &trans  &trans     &trans         &trans
            >;
        };

        swedish {
            bindings = <
&trans  &kp Q  &kp W  &kp E   &kp R             &kp T                                        &kp Y    &kp U             &kp I      &kp O    &kp P              &kp RA(LEFT_BRACKET)
&trans  &kp A  &kp S  &kp D   &mt LEFT_SHIFT F  &kp G                                        &kp H    &mt LEFT_SHIFT J  &kp K      &kp L    &kp RA(SEMICOLON)  &kp RA(SQT)
&trans  &kp Z  &kp X  &kp C   &kp V             &kp B    &trans   &trans   &trans   &trans   &kp N    &kp M             &kp COMMA  &kp DOT  &kp FSLH           &trans
                      &trans  &kp SPACE         &kp TAB  &kp RET  &kp ESC  &kp ESC  &kp RET  &kp TAB  &kp BSPC          &trans
            >;
        };
    };
};
